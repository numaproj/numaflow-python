# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import batchmap_pb2 as batchmap__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class BatchMapStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsReady = channel.unary_unary(
            "/batchmap.v1.BatchMap/IsReady",
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=batchmap__pb2.ReadyResponse.FromString,
        )
        self.BatchMapFn = channel.stream_stream(
            "/batchmap.v1.BatchMap/BatchMapFn",
            request_serializer=batchmap__pb2.BatchMapRequest.SerializeToString,
            response_deserializer=batchmap__pb2.BatchMapResponse.FromString,
        )


class BatchMapServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IsReady(self, request, context):
        """IsReady is the heartbeat endpoint for gRPC."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchMapFn(self, request_iterator, context):
        """BatchMapFn is a bi-directional streaming rpc which applies a
        Map function on each BatchMapRequest element of the stream and then returns streams
        back BatchMapResponse elements.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BatchMapServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "IsReady": grpc.unary_unary_rpc_method_handler(
            servicer.IsReady,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=batchmap__pb2.ReadyResponse.SerializeToString,
        ),
        "BatchMapFn": grpc.stream_stream_rpc_method_handler(
            servicer.BatchMapFn,
            request_deserializer=batchmap__pb2.BatchMapRequest.FromString,
            response_serializer=batchmap__pb2.BatchMapResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "batchmap.v1.BatchMap", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class BatchMap(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IsReady(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/batchmap.v1.BatchMap/IsReady",
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            batchmap__pb2.ReadyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BatchMapFn(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/batchmap.v1.BatchMap/BatchMapFn",
            batchmap__pb2.BatchMapRequest.SerializeToString,
            batchmap__pb2.BatchMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
